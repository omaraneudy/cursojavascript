Notas a tomar en cuenta con javascript:
Para solucionar los problemas de carga de scripts en una página se pueden aplicar.

Algunos problemas que se presentan a la hora de cargar scripts en el momento adecuado son:
El HTML de una página se carga en el orden en que aparece, lo que presenta un problema si se utiliza javascript para manipular elementos de la página. Esto no funciona si el código javascript se carga y se procesa antes que el HTML que nosotros queremos que haga algo.

Si colocamos javascript en el encabezado, este se cargará y se ejecutará antes de que se analice el cuerpo HTML, lo que puede causar un error.

Una solución a esto puede ser utilizar la estructura siguiente:

document.addEventListener("DOMContentLoaded", function(){
	...
});
Lo anterior se conoce como detector de eventos, que escucha el evento "DOMContentLoaded" del navegador, el cual indica que el cuerpo HTML ya se cargó y se analizó. El código javascript dentro del bloque anterior no se ejecutará hasta que se active ese evento.

Otra solución, utilizando javascript externo, puede ser utilizando el atributo defer en la etiqueta script del documento HTML. defer le dice al navegador que siga descargando el contenido HTML luego de alcanzar la etiqueta del elemento <script>.

<script src="script.js" defer></script>

Esto permite que se cargue simultaneamente el script y el HTML y que el código funcione.

defer: este atributo permite ejecutar los scripts cargados por orden de aparición en la página y se ejecutará luego de que se descargue el script y el contenido HTML.

async: este atributo permite ejecutar scripts y evitar el bloqueo de script al igual que defer, solo que async no asegura que los scripts se ejecuten en orden específico. Se usa normalmente para ejecutar scripts de una página de forma independiente y los scripts no dependen de otro script de la página.

Eventos:
son cosas que suceden en el navegador. 
botonSubmit.addEventListener('click', checkGuess);
 
el addEventListener es un escucha de eventos y toma dos argumentos: el tipo de evento a escuchar, y el código que queremos ejecutar cuando suceda el evento.



https://developer.mozilla.org/es/docs/Learn/JavaScript/First_steps/A_first_splash#ejemplo_%E2%80%94_juego_adivina_el_n%C3%BAmero

----------------------------------------------

----------------------------------------------
Comentarios:
Se puede realizar comentarios de una línea con //, o comentarios multilíneas con /* insertar comentario aquí */

----------------------------------------------
Tipos de datos:
undefined - no hay dato asignado
null - un objeto es nulo o no existe
boolean - dato verdarero o falso
string - representa cadena de caracteres
symbol
number - representa un numero
object - representa un objeto que relaxiona propiedades y funciones bajo la misma estructura

----------------------------------------------
Variable:
Se pueden crear variables con la variable clave var seguido del nombre de la variable,
luego el signo igual (=) para asignarle un valor. Ej: var nombre = "Juan";

Variable inicializada: es cuando se le asigna un valor
Variable no inicializada: es cuando a la variable todavía no se le ha asignado un valor

-----------------------------------------------
Aritmética:
en Javascript se pueden llevar a cabo operaciones aritméticas, como la suma, resta, división, etc.

Operadores aritméticos: 
+ suma
- resta
* multiplicación
/ división

+ se puede usar para concatenar o unir cadenas de texto

variable++ aumenta en uno el valor de la variable
variable-- reduce en uno el valor de la variable

----------------------------------------------
Operador de asignación compuesta:
Asignacion de suma: permite incrementar el valor de una variable en la cantidad que determinemos. Ej: variable += 5;

Asignación de resta: permite reducir el valor en la cantidad que determinemos. Ej: variable -= 5;

Asignación de división: permite dividir el valor de una variable por el valor que determinemos. Ej: variable /= 4;

Asignación de multiplicación: permite multiplicar el malor de una variable por el valor que deseemos. Ej: variable *= 5;

----------------------------------------------
Operadores de comparación:
=== igualdad estricta
!== no igual
< menor que
> mayor que
----------------------------------------------
Resto de una división:
Permite obtener la parte restante de una división. El resto se calcula utilizando el signo %
Ej: var resultado = 4 % 2;
------------------------------------------------
Cadenas de caracteres:
se crean con los signos "" ó ''.

Secuencia de escape para comillas: para hacer que las comillas formen parte de la cadena, podemos usar el caracter / antes de la comilla que queramos incluir. Ej: variable = "Esto está entre \"comilla\" "

También para poder incluir comilla en una cadena de caracteres, podemos usar una de las dos comillas. Ej: variable = "Soy un 'millonario' ", o también: variable = 'Soy un "millonario"'

------------------------------------------------
Secuencias de caracteres:
Estas tienen un significado diferente dentro de una secuencia de caracteres.

Algunos de estos son:

comilla simple \'
comilla doble \"
barra invertida \\
linea nueva \n
retorno de carro \r
tabulación \t
retroceso \b
salto de página \f
------------------------------------------------
Longitud de cadena de caracteres:
Esto es cuanto caracteres tiene una cadena de caracteres.
Para avreiguar la longitud de una cadena, se le coloca .length luego de la variable que contiene la cadena. Ej: variable.length;

------------------------------------------------
Notación de corchete: nos permite acceder a un dato en especifico 
al colocar un indice. Por ejemplo, en una cadena de caracteres podemos especificar
a qué elementos de lacadena podemos acceder.
var palabra = 'aguacate';
console.log(palabra[2]);

al especificar el indice 2, le indicamos que queremos que nos muestre el caracter 'u', ya 
que la cadena tiene un orden de indice que inicia desde el cero.
a g u a c a t e
0 1 2 3 4 5 6 7


------------------------------------------------
Bucle:
Permiten ejecutar un bloque de código varias veces hasta cumplir una condicion determinada.

For: bucle que toma tres valores; valor inicial, la condición de salida y el incremento.

for (let i = 0; i < 10; i++){
	console.log(i);
}

------------------------------------------------
Arrays
Son estructuras de datos que nos permiten almacenar varios datos en una misma estructura.
Para formar un array, se declara una variable, a la cual se le asignan los valores dentro de unos corchetes y separados por comas.
ejemplo:
var estudiantes = ["juan", "pedro", "jose"];

Arrays anidados
Son arreglos que contienen otros arreglos dentro.

var productos = [["Coca Cola", 25], ["Dona", 30]];

